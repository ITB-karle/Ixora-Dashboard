{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { ref, onMounted, computed } from 'vue';\nimport { apiRequest } from '@/assets/js/apiRequest.js';\nimport { useRouter } from 'vue-router';\nimport ArgonButton from \"@/components/ArgonButton.vue\";\nimport ArgonTextarea from \"@/components/ArgonTextarea.vue\";\nimport ErrorModal from \"./components/ErrorModal.vue\";\nimport SuccessModal from \"./components/SuccessModal.vue\";\nexport default {\n  __name: 'FullCalendar',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const months = [{\n      name: 'January',\n      value: 1\n    }, {\n      name: 'February',\n      value: 2\n    }, {\n      name: 'March',\n      value: 3\n    }, {\n      name: 'April',\n      value: 4\n    }, {\n      name: 'May',\n      value: 5\n    }, {\n      name: 'June',\n      value: 6\n    }, {\n      name: 'July',\n      value: 7\n    }, {\n      name: 'August',\n      value: 8\n    }, {\n      name: 'September',\n      value: 9\n    }, {\n      name: 'October',\n      value: 10\n    }, {\n      name: 'November',\n      value: 11\n    }, {\n      name: 'December',\n      value: 12\n    }];\n    const currentYear = new Date().getFullYear();\n    const years = Array.from({\n      length: 10\n    }, (v, k) => currentYear - k);\n    const selectedMonth = ref(months[new Date().getMonth()].value);\n    const selectedYear = ref(currentYear);\n    const handleMonthChange = () => {\n      getMonthlyReminder(selectedYear.value, selectedMonth.value);\n    };\n    const handleYearChange = () => {\n      getMonthlyReminder(selectedYear.value, selectedMonth.value);\n    };\n    const router = useRouter();\n    onMounted(() => {\n      // logCurrentMonth();\n      getMonthlyReminder(selectedYear.value, selectedMonth.value);\n    });\n\n    // function logCurrentMonth() {\n    //   const calendarTitle = document.querySelector('.fc-toolbar-title');\n    //   if (calendarTitle) {\n    //     const titleText = calendarTitle.textContent;\n    //     const [monthName, year] = titleText.split(' ');\n    //     const monthNumber = monthMap[monthName];\n    //     console.log(`Current view month: ${monthName} (${monthNumber})`);\n    //     getMonthlyReminder(year, monthNumber);\n    //   }\n    // }\n\n    const showErrorModal = ref(false);\n    const showSuccessModal = ref(false);\n    const errorMessage = ref('');\n    const successMessage = ref('');\n    const handleApiError = error => {\n      errorMessage.value = error.message || 'An unknown error occurred';\n      showErrorModal.value = true;\n    };\n    const handleApiSuccess = message => {\n      successMessage.value = message || 'Operation completed successfully';\n      showSuccessModal.value = true;\n    };\n    const goListPage = () => {\n      showSuccessModal.value = false;\n      router.go();\n    };\n    const showModal = ref(false);\n    const task = ref({\n      id: '',\n      remark: ''\n    });\n    const modalTask = uuid => {\n      showModal.value = true;\n      task.value.id = uuid;\n    };\n    const closeModal = () => {\n      showModal.value = false;\n    };\n    const patient_reminder = ref([]);\n    const form = ref([]);\n    const getMonthlyReminder = async (year, month) => {\n      const data = {\n        year,\n        month\n      };\n      try {\n        console.log(data);\n        const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/monthly`, data);\n        patient_reminder.value = response.data;\n        form.value = {\n          ...response.data\n        };\n        // setCalendarEvents(patient_reminder.value);\n      } catch (error) {\n        console.error('Get Data Failed:', error);\n      }\n    };\n    const completeTask = async () => {\n      const data = {\n        uuid: task.value.id,\n        remark: task.value.remark\n      };\n      try {\n        const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/log/create`, data);\n        if (response.http_status < 300) {\n          closeModal();\n          handleApiSuccess('Task Completed');\n        } else {\n          throw new Error(response.message);\n        }\n      } catch (error) {\n        handleApiError(error);\n      }\n    };\n\n    // const sortedItems = computed(() => {\n    //   return patient_reminder.value.slice().sort((a, b) => {\n    //     return new Date(a.date_from) - new Date(b.date_from);\n    //   });\n    // });\n\n    const groupedReminders = computed(() => {\n      return patient_reminder.value.reduce((acc, item) => {\n        const date = item.date_from.split(\" \")[0];\n        if (!acc[date]) {\n          acc[date] = [];\n        }\n        acc[date].push(item);\n        return acc;\n      }, {});\n    });\n    const __returned__ = {\n      months,\n      currentYear,\n      years,\n      selectedMonth,\n      selectedYear,\n      handleMonthChange,\n      handleYearChange,\n      router,\n      showErrorModal,\n      showSuccessModal,\n      errorMessage,\n      successMessage,\n      handleApiError,\n      handleApiSuccess,\n      goListPage,\n      showModal,\n      task,\n      modalTask,\n      closeModal,\n      patient_reminder,\n      form,\n      getMonthlyReminder,\n      completeTask,\n      groupedReminders,\n      ref,\n      onMounted,\n      computed,\n      get apiRequest() {\n        return apiRequest;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      ArgonButton,\n      ArgonTextarea,\n      ErrorModal,\n      SuccessModal\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","onMounted","computed","apiRequest","useRouter","ArgonButton","ArgonTextarea","ErrorModal","SuccessModal","months","name","value","currentYear","Date","getFullYear","years","Array","from","length","v","k","selectedMonth","getMonth","selectedYear","handleMonthChange","getMonthlyReminder","handleYearChange","router","showErrorModal","showSuccessModal","errorMessage","successMessage","handleApiError","error","message","handleApiSuccess","goListPage","go","showModal","task","id","remark","modalTask","uuid","closeModal","patient_reminder","form","year","month","data","console","log","response","completeTask","http_status","Error","groupedReminders","reduce","acc","item","date","date_from","split","push"],"sources":["C:/Users/chink/Documents/GitHub/ixora-dashboard/src/views/FullCalendar.vue"],"sourcesContent":["<script setup>\r\nimport { ref, onMounted, computed } from 'vue';\r\nimport { apiRequest } from '@/assets/js/apiRequest.js';\r\nimport { useRouter } from 'vue-router';\r\nimport ArgonButton from \"@/components/ArgonButton.vue\";\r\nimport ArgonTextarea from \"@/components/ArgonTextarea.vue\";\r\n\r\nimport ErrorModal from \"./components/ErrorModal.vue\";\r\nimport SuccessModal from \"./components/SuccessModal.vue\";\r\n\r\nconst months = [\r\n  { name: 'January', value: 1 },\r\n  { name: 'February', value: 2 },\r\n  { name: 'March', value: 3 },\r\n  { name: 'April', value: 4 },\r\n  { name: 'May', value: 5 },\r\n  { name: 'June', value: 6 },\r\n  { name: 'July', value: 7 },\r\n  { name: 'August', value: 8 },\r\n  { name: 'September', value: 9 },\r\n  { name: 'October', value: 10 },\r\n  { name: 'November', value: 11 },\r\n  { name: 'December', value: 12 },\r\n];\r\n\r\nconst currentYear = new Date().getFullYear();\r\nconst years = Array.from({ length: 10 }, (v, k) => currentYear - k);\r\n\r\nconst selectedMonth = ref(months[new Date().getMonth()].value);\r\nconst selectedYear = ref(currentYear);\r\n\r\nconst handleMonthChange = () => {\r\n  getMonthlyReminder(selectedYear.value, selectedMonth.value);\r\n};\r\n\r\nconst handleYearChange = () => {\r\n  getMonthlyReminder(selectedYear.value, selectedMonth.value);\r\n};\r\n\r\nconst router = useRouter();\r\n\r\nonMounted(() => {\r\n  // logCurrentMonth();\r\n  getMonthlyReminder(selectedYear.value, selectedMonth.value);\r\n});\r\n\r\n// function logCurrentMonth() {\r\n//   const calendarTitle = document.querySelector('.fc-toolbar-title');\r\n//   if (calendarTitle) {\r\n//     const titleText = calendarTitle.textContent;\r\n//     const [monthName, year] = titleText.split(' ');\r\n//     const monthNumber = monthMap[monthName];\r\n//     console.log(`Current view month: ${monthName} (${monthNumber})`);\r\n//     getMonthlyReminder(year, monthNumber);\r\n//   }\r\n// }\r\n\r\nconst showErrorModal = ref(false);\r\nconst showSuccessModal = ref(false);\r\nconst errorMessage = ref('');\r\nconst successMessage = ref('');\r\n\r\nconst handleApiError = (error) => {\r\n  errorMessage.value = error.message || 'An unknown error occurred';\r\n  showErrorModal.value = true;\r\n};\r\n\r\nconst handleApiSuccess = (message) => {\r\n  successMessage.value = message || 'Operation completed successfully';\r\n  showSuccessModal.value = true;\r\n};\r\n\r\nconst goListPage = () => {\r\n  showSuccessModal.value = false;\r\n  router.go();\r\n};\r\n\r\nconst showModal = ref(false);\r\nconst task = ref({\r\n  id: '',\r\n  remark: '',\r\n});\r\n\r\nconst modalTask = (uuid) => {\r\n  showModal.value = true;\r\n  task.value.id = uuid;\r\n};\r\n\r\nconst closeModal = () => {\r\n  showModal.value = false;\r\n};\r\n\r\nconst patient_reminder = ref([]);\r\nconst form = ref([]);\r\n\r\nconst getMonthlyReminder = async (year, month) => {\r\n  const data = { year, month };\r\n  try {\r\n    console.log(data);\r\n    const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/monthly`, data);\r\n    patient_reminder.value = response.data;\r\n    form.value = { ...response.data };\r\n    // setCalendarEvents(patient_reminder.value);\r\n  } catch (error) {\r\n    console.error('Get Data Failed:', error);\r\n  }\r\n};\r\n\r\nconst completeTask = async () => {\r\n  const data = {\r\n    uuid: task.value.id,\r\n    remark: task.value.remark,\r\n  };\r\n  try {\r\n    const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/log/create`, data);\r\n    if (response.http_status < 300) {\r\n      closeModal();\r\n      handleApiSuccess('Task Completed');\r\n    } else {\r\n      throw new Error(response.message);\r\n    }\r\n  } catch (error) {\r\n    handleApiError(error);\r\n  }\r\n}\r\n\r\n// const sortedItems = computed(() => {\r\n//   return patient_reminder.value.slice().sort((a, b) => {\r\n//     return new Date(a.date_from) - new Date(b.date_from);\r\n//   });\r\n// });\r\n\r\n\r\nconst groupedReminders = computed(() => {\r\n  return patient_reminder.value.reduce((acc, item) => {\r\n    const date = item.date_from.split(\" \")[0];\r\n    if (!acc[date]) {\r\n      acc[date] = [];\r\n    }\r\n    acc[date].push(item);\r\n    return acc;\r\n  }, {});\r\n});\r\n</script>\r\n<template>\r\n    <main>\r\n    <div class=\"container-fluid\">\r\n      <!-- <div\r\n        class=\"page-header min-height-300\"\r\n        style=\"\r\n          background-image: url(&quot;https://images.unsplash.com/photo-1531512073830-ba890ca4eba2?ixid=MnwxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8&ixlib=rb-1.2.1&auto=format&fit=crop&w=1920&q=80&quot;);\r\n          margin-right: -24px;\r\n          margin-left: -34%;\r\n        \"\r\n      >\r\n        <span class=\"mask bg-gradient-warning opacity-6\"></span>\r\n      </div> -->\r\n      <div class=\"row mb-4\">\r\n        <div class=\"col-md-6 text-end\">\r\n          <label for=\"year-select\" class=\"calendar-label\">Select Year: </label>\r\n          <select id=\"year-select\" class=\"calendar-select\" v-model=\"selectedYear\" @change=\"handleYearChange\">\r\n            <option v-for=\"year in years\" :key=\"year\" :value=\"year\">{{ year }}</option>\r\n          </select>\r\n        </div>\r\n        <div class=\"col-md-6\">\r\n          <label for=\"month-select\" class=\"calendar-label\">Select Month: </label>\r\n          <select id=\"month-select\" class=\"calendar-select\" v-model=\"selectedMonth\" @change=\"handleMonthChange\">\r\n            <option v-for=\"month in months\" :key=\"month.value\" :value=\"month.value\">{{ month.name }}</option>\r\n          </select>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-if=\"groupedReminders && Object.keys(groupedReminders).length\" class=\"py-4 container-fluid\">\r\n      <div v-for=\"(reminders, date) in groupedReminders\" :key=\"date\" class=\"mb-4 card p-4\">\r\n        <h3>{{ date }}</h3>\r\n        <div class=\"row\">\r\n          <div class=\"col-md-4 mb-4\" v-for=\"(reminder, index) in reminders\" :key=\"index\">\r\n            <div class=\"card\">\r\n              <div class=\"card-header border-bottom border-light\">\r\n                <div class=\"d-flex align-items-center justify-content-between\">\r\n                  <p class=\"mb-0 text-primary font-weight-bolder\">{{ reminder.patient_name }}</p>\r\n                  <p class=\"mb-0\">{{ reminder.date_from }}</p>\r\n                </div>\r\n              </div>\r\n              <div class=\"card-body px-0 pt-0 pb-2\"  style=\"min-height: 120px;\">\r\n                <div class=\"p-4\">{{ reminder.reminder }}</div>\r\n              </div>\r\n              <div class=\"card-footer\">\r\n                <div class=\"d-flex justify-content-between align-items-center\">\r\n                  <div class=\"font-weight-bolder text-end\">\r\n                    <span class=\"font-weight-normal\">Created by: </span>\r\n                    {{ reminder.created_by }}\r\n                  </div>\r\n                  <div>\r\n                    <argon-button @click=\"modalTask(reminder.uuid)\">Complete</argon-button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <div v-else class=\"py-4 container-fluid\">\r\n      <div class=\"bg-white text-center p-5 rounded\">\r\n        This month no reminder\r\n      </div>\r\n      \r\n    </div>\r\n    <div v-if=\"showModal\" class=\"modal fade show d-block\" tabindex=\"-1\" role=\"dialog\">\r\n      <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n        <form class=\"modal-content\" @submit.prevent=\"completeTask()\">\r\n          <div class=\"modal-header\">\r\n            <h5 class=\"modal-title\">Complete Task</h5>\r\n            <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n              <span aria-hidden=\"true\" @click=\"closeModal\">&times;</span>\r\n            </button>\r\n          </div>\r\n          <div class=\"modal-body\">\r\n            <p>Please make sure this task uuid\r\n              <span class=\"font-weight-bolder\">({{ task.id }})</span>\r\n              is completed\r\n            </p>\r\n            <div class=\"\">\r\n              <argon-textarea :rows=\"8\" type=\"text\" v-model:title=\"task.remark\" required>\r\n                Reminder\r\n              </argon-textarea>\r\n            </div>\r\n          </div>\r\n          <div class=\"modal-footer\">\r\n            <button type=\"submit\" class=\"btn btn-primary\">Confirm</button>\r\n            <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeModal\">Cancel</button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n    <error-modal :show-modal=\"showErrorModal\" :error-message=\"errorMessage\" @close=\"showErrorModal = false\" />\r\n    <success-modal :show-modal=\"showSuccessModal\" :success-message=\"successMessage\" @close=\"goListPage\" />\r\n  </main>\r\n</template>\r\n\r\n<style>\r\n.text-truncate {\r\n  max-width: 200px;\r\n  display: inline-block;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n.modal {\r\n  background-color: rgba(0, 0, 0, 0.5);\r\n}\r\n\r\n.calendar-label {\r\n  color: white;\r\n}\r\n\r\n.calendar-select {\r\n  width: 135px;\r\n  border-radius: 10px;\r\n  margin-left: 10px;\r\n  text-align: center;\r\n}\r\n</style>"],"mappings":";AACA,SAASA,GAAG,EAAEC,SAAS,EAAEC,QAAQ,QAAQ,KAAK;AAC9C,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAOC,aAAa,MAAM,gCAAgC;AAE1D,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,YAAY,MAAM,+BAA+B;;;;;;;IAExD,MAAMC,MAAM,GAAG,CACb;MAAEC,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAE;IAAE,CAAC,EAC7B;MAAED,IAAI,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAE,CAAC,EAC9B;MAAED,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAE,CAAC,EAC3B;MAAED,IAAI,EAAE,OAAO;MAAEC,KAAK,EAAE;IAAE,CAAC,EAC3B;MAAED,IAAI,EAAE,KAAK;MAAEC,KAAK,EAAE;IAAE,CAAC,EACzB;MAAED,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAE,CAAC,EAC1B;MAAED,IAAI,EAAE,MAAM;MAAEC,KAAK,EAAE;IAAE,CAAC,EAC1B;MAAED,IAAI,EAAE,QAAQ;MAAEC,KAAK,EAAE;IAAE,CAAC,EAC5B;MAAED,IAAI,EAAE,WAAW;MAAEC,KAAK,EAAE;IAAE,CAAC,EAC/B;MAAED,IAAI,EAAE,SAAS;MAAEC,KAAK,EAAE;IAAG,CAAC,EAC9B;MAAED,IAAI,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAG,CAAC,EAC/B;MAAED,IAAI,EAAE,UAAU;MAAEC,KAAK,EAAE;IAAG,CAAC,CAChC;IAED,MAAMC,WAAW,GAAG,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC;IAC5C,MAAMC,KAAK,GAAGC,KAAK,CAACC,IAAI,CAAC;MAAEC,MAAM,EAAE;IAAG,CAAC,EAAE,CAACC,CAAC,EAAEC,CAAC,KAAKR,WAAW,GAAGQ,CAAC,CAAC;IAEnE,MAAMC,aAAa,GAAGrB,GAAG,CAACS,MAAM,CAAC,IAAII,IAAI,CAAC,CAAC,CAACS,QAAQ,CAAC,CAAC,CAAC,CAACX,KAAK,CAAC;IAC9D,MAAMY,YAAY,GAAGvB,GAAG,CAACY,WAAW,CAAC;IAErC,MAAMY,iBAAiB,GAAGA,CAAA,KAAM;MAC9BC,kBAAkB,CAACF,YAAY,CAACZ,KAAK,EAAEU,aAAa,CAACV,KAAK,CAAC;IAC7D,CAAC;IAED,MAAMe,gBAAgB,GAAGA,CAAA,KAAM;MAC7BD,kBAAkB,CAACF,YAAY,CAACZ,KAAK,EAAEU,aAAa,CAACV,KAAK,CAAC;IAC7D,CAAC;IAED,MAAMgB,MAAM,GAAGvB,SAAS,CAAC,CAAC;IAE1BH,SAAS,CAAC,MAAM;MACd;MACAwB,kBAAkB,CAACF,YAAY,CAACZ,KAAK,EAAEU,aAAa,CAACV,KAAK,CAAC;IAC7D,CAAC,CAAC;;IAEF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;IAEA,MAAMiB,cAAc,GAAG5B,GAAG,CAAC,KAAK,CAAC;IACjC,MAAM6B,gBAAgB,GAAG7B,GAAG,CAAC,KAAK,CAAC;IACnC,MAAM8B,YAAY,GAAG9B,GAAG,CAAC,EAAE,CAAC;IAC5B,MAAM+B,cAAc,GAAG/B,GAAG,CAAC,EAAE,CAAC;IAE9B,MAAMgC,cAAc,GAAIC,KAAK,IAAK;MAChCH,YAAY,CAACnB,KAAK,GAAGsB,KAAK,CAACC,OAAO,IAAI,2BAA2B;MACjEN,cAAc,CAACjB,KAAK,GAAG,IAAI;IAC7B,CAAC;IAED,MAAMwB,gBAAgB,GAAID,OAAO,IAAK;MACpCH,cAAc,CAACpB,KAAK,GAAGuB,OAAO,IAAI,kCAAkC;MACpEL,gBAAgB,CAAClB,KAAK,GAAG,IAAI;IAC/B,CAAC;IAED,MAAMyB,UAAU,GAAGA,CAAA,KAAM;MACvBP,gBAAgB,CAAClB,KAAK,GAAG,KAAK;MAC9BgB,MAAM,CAACU,EAAE,CAAC,CAAC;IACb,CAAC;IAED,MAAMC,SAAS,GAAGtC,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMuC,IAAI,GAAGvC,GAAG,CAAC;MACfwC,EAAE,EAAE,EAAE;MACNC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,SAAS,GAAIC,IAAI,IAAK;MAC1BL,SAAS,CAAC3B,KAAK,GAAG,IAAI;MACtB4B,IAAI,CAAC5B,KAAK,CAAC6B,EAAE,GAAGG,IAAI;IACtB,CAAC;IAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;MACvBN,SAAS,CAAC3B,KAAK,GAAG,KAAK;IACzB,CAAC;IAED,MAAMkC,gBAAgB,GAAG7C,GAAG,CAAC,EAAE,CAAC;IAChC,MAAM8C,IAAI,GAAG9C,GAAG,CAAC,EAAE,CAAC;IAEpB,MAAMyB,kBAAkB,GAAG,MAAAA,CAAOsB,IAAI,EAAEC,KAAK,KAAK;MAChD,MAAMC,IAAI,GAAG;QAAEF,IAAI;QAAEC;MAAM,CAAC;MAC5B,IAAI;QACFE,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;QACjB,MAAMG,QAAQ,GAAG,MAAMjD,UAAU,CAAC,2FAA2F,EAAE8C,IAAI,CAAC;QACpIJ,gBAAgB,CAAClC,KAAK,GAAGyC,QAAQ,CAACH,IAAI;QACtCH,IAAI,CAACnC,KAAK,GAAG;UAAE,GAAGyC,QAAQ,CAACH;QAAK,CAAC;QACjC;MACF,CAAC,CAAC,OAAOhB,KAAK,EAAE;QACdiB,OAAO,CAACjB,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C;IACF,CAAC;IAED,MAAMoB,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMJ,IAAI,GAAG;QACXN,IAAI,EAAEJ,IAAI,CAAC5B,KAAK,CAAC6B,EAAE;QACnBC,MAAM,EAAEF,IAAI,CAAC5B,KAAK,CAAC8B;MACrB,CAAC;MACD,IAAI;QACF,MAAMW,QAAQ,GAAG,MAAMjD,UAAU,CAAC,8FAA8F,EAAE8C,IAAI,CAAC;QACvI,IAAIG,QAAQ,CAACE,WAAW,GAAG,GAAG,EAAE;UAC9BV,UAAU,CAAC,CAAC;UACZT,gBAAgB,CAAC,gBAAgB,CAAC;QACpC,CAAC,MAAM;UACL,MAAM,IAAIoB,KAAK,CAACH,QAAQ,CAAClB,OAAO,CAAC;QACnC;MACF,CAAC,CAAC,OAAOD,KAAK,EAAE;QACdD,cAAc,CAACC,KAAK,CAAC;MACvB;IACF,CAAC;;IAED;IACA;IACA;IACA;IACA;;IAGA,MAAMuB,gBAAgB,GAAGtD,QAAQ,CAAC,MAAM;MACtC,OAAO2C,gBAAgB,CAAClC,KAAK,CAAC8C,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAK;QAClD,MAAMC,IAAI,GAAGD,IAAI,CAACE,SAAS,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;QACzC,IAAI,CAACJ,GAAG,CAACE,IAAI,CAAC,EAAE;UACdF,GAAG,CAACE,IAAI,CAAC,GAAG,EAAE;QAChB;QACAF,GAAG,CAACE,IAAI,CAAC,CAACG,IAAI,CAACJ,IAAI,CAAC;QACpB,OAAOD,GAAG;MACZ,CAAC,EAAE,CAAC,CAAC,CAAC;IACR,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}