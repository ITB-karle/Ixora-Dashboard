{"ast":null,"code":"import { onMounted, ref, computed } from \"vue\";\nimport { apiRequest } from '@/assets/js/apiRequest.js';\nimport { useRouter } from 'vue-router';\nimport ArgonInput from \"@/components/ArgonInput.vue\";\nimport ArgonTextarea from \"@/components/ArgonTextarea.vue\";\nimport ArgonButton from \"@/components/ArgonButton.vue\";\nimport ArgonSwitch from \"@/components/ArgonSwitch.vue\";\nimport Multiselect from 'vue-multiselect';\nimport ErrorModal from \"./components/ErrorModal.vue\";\nimport SuccessModal from \"./components/SuccessModal.vue\";\nexport default {\n  __name: 'CreateNotification',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const router = useRouter();\n    var is_All = ref(true);\n    const selectUser = ref([]);\n    // const options = ref([]);    \n\n    onMounted(() => {\n      getMemberList();\n    });\n    const showErrorModal = ref(false);\n    const showSuccessModal = ref(false);\n    const errorMessage = ref('');\n    const successMessage = ref('');\n    const handleApiError = error => {\n      errorMessage.value = error.message || 'An unknown error occurred';\n      showErrorModal.value = true;\n    };\n    const handleApiSuccess = message => {\n      successMessage.value = message || 'Operation completed successfully';\n      showSuccessModal.value = true;\n    };\n    const goListPage = () => {\n      showSuccessModal.value = false;\n      router.go();\n    };\n\n    // const userList = ref([]);\n    const optionsPatient = ref([]);\n    const optionsDoctor = ref([]);\n    const optionsCS = ref([]);\n    const getMemberList = async () => {\n      try {\n        const response = await apiRequest('https://staging.itbrightsolution.com/ixora_backend/public/api/v1/user/list');\n        const patients = response.data.patients;\n        optionsPatient.value = patients.map(patient => ({\n          name: patient.name,\n          uuid: patient.uuid\n        }));\n        const doctors = response.data.doctors;\n        optionsDoctor.value = doctors.map(doctor => ({\n          name: doctor.name,\n          uuid: doctor.uuid\n        }));\n        const css = response.data.customer_service;\n        optionsCS.value = css.map(cs => ({\n          name: cs.name,\n          uuid: cs.uuid\n        }));\n      } catch (error) {\n        console.error('Failed to fetch member list:', error);\n      }\n    };\n    const options = computed(() => [...optionsPatient.value, ...optionsDoctor.value, ...optionsCS.value]);\n    const form = ref({});\n    const pushNotification = async () => {\n      const data = {\n        headings: form.value.headings,\n        message: form.value.message\n      };\n      if (is_All.value) {\n        try {\n          const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/pushNotification/all`, data);\n          if (response.http_status < 300) {\n            handleApiSuccess('Notification pushed successfully');\n          } else {\n            throw new Error(response.message);\n          }\n        } catch (error) {\n          handleApiError(error);\n        }\n      } else {\n        if (selectUser.value.length > 0) {\n          selectUser.value.forEach((user, index) => {\n            data[`external_id[${index}]`] = user.uuid;\n          });\n          console.log(selectUser.value.map(user => user.uuid)); // Logging the list of UUIDs\n\n          try {\n            const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/pushNotification/single`, data);\n            if (response.http_status < 300) {\n              handleApiSuccess('Notification pushed successfully');\n            } else {\n              throw new Error(response.message);\n            }\n          } catch (error) {\n            handleApiError(error);\n          }\n        } else {\n          console.error('No users selected');\n          handleApiError('No users selected');\n        }\n      }\n    };\n    const __returned__ = {\n      router,\n      get is_All() {\n        return is_All;\n      },\n      set is_All(v) {\n        is_All = v;\n      },\n      selectUser,\n      showErrorModal,\n      showSuccessModal,\n      errorMessage,\n      successMessage,\n      handleApiError,\n      handleApiSuccess,\n      goListPage,\n      optionsPatient,\n      optionsDoctor,\n      optionsCS,\n      getMemberList,\n      options,\n      form,\n      pushNotification,\n      onMounted,\n      ref,\n      computed,\n      get apiRequest() {\n        return apiRequest;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      ArgonInput,\n      ArgonTextarea,\n      ArgonButton,\n      ArgonSwitch,\n      get Multiselect() {\n        return Multiselect;\n      },\n      ErrorModal,\n      SuccessModal\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["onMounted","ref","computed","apiRequest","useRouter","ArgonInput","ArgonTextarea","ArgonButton","ArgonSwitch","Multiselect","ErrorModal","SuccessModal","router","is_All","selectUser","getMemberList","showErrorModal","showSuccessModal","errorMessage","successMessage","handleApiError","error","value","message","handleApiSuccess","goListPage","go","optionsPatient","optionsDoctor","optionsCS","response","patients","data","map","patient","name","uuid","doctors","doctor","css","customer_service","cs","console","options","form","pushNotification","headings","http_status","Error","length","forEach","user","index","log"],"sources":["C:/Users/chink/Documents/GitHub/ixora-dashboard/src/views/CreateNotification.vue"],"sourcesContent":["<script setup>\r\nimport { onMounted, ref, computed } from \"vue\";\r\nimport { apiRequest } from '@/assets/js/apiRequest.js';\r\nimport { useRouter } from 'vue-router';\r\n\r\nimport ArgonInput from \"@/components/ArgonInput.vue\";\r\nimport ArgonTextarea from \"@/components/ArgonTextarea.vue\";\r\nimport ArgonButton from \"@/components/ArgonButton.vue\";\r\nimport ArgonSwitch from \"@/components/ArgonSwitch.vue\";\r\nimport Multiselect from 'vue-multiselect';\r\n\r\nimport ErrorModal from \"./components/ErrorModal.vue\";\r\nimport SuccessModal from \"./components/SuccessModal.vue\";\r\n\r\n\r\n\r\nconst router = useRouter();\r\nvar is_All = ref(true);\r\nconst selectUser = ref([]);\r\n// const options = ref([]);    \r\n\r\nonMounted(() => {\r\n  getMemberList();\r\n});\r\n\r\n\r\n\r\nconst showErrorModal = ref(false);\r\nconst showSuccessModal = ref(false);\r\nconst errorMessage = ref('');\r\nconst successMessage = ref('');\r\n\r\nconst handleApiError = (error) => {\r\n  errorMessage.value = error.message || 'An unknown error occurred';\r\n  showErrorModal.value = true;\r\n};\r\n\r\nconst handleApiSuccess = (message) => {\r\n  successMessage.value = message || 'Operation completed successfully';\r\n  showSuccessModal.value = true;\r\n};\r\n\r\nconst goListPage= () => {\r\n  showSuccessModal.value = false;\r\n  router.go();\r\n};\r\n\r\n// const userList = ref([]);\r\nconst optionsPatient = ref([]);\r\nconst optionsDoctor = ref([]);\r\nconst optionsCS = ref([]);\r\nconst getMemberList = async () => {\r\n  try {\r\n    const response = await apiRequest('https://staging.itbrightsolution.com/ixora_backend/public/api/v1/user/list');\r\n    const patients = response.data.patients;\r\n    optionsPatient.value = patients.map(patient => ({\r\n      name: patient.name,\r\n      uuid: patient.uuid\r\n    }));\r\n    const doctors = response.data.doctors;\r\n    optionsDoctor.value = doctors.map(doctor => ({\r\n      name: doctor.name,\r\n      uuid: doctor.uuid\r\n    }));\r\n    const css = response.data.customer_service;\r\n    optionsCS.value = css.map(cs => ({\r\n      name: cs.name,\r\n      uuid: cs.uuid\r\n    }));\r\n  } catch (error) {\r\n    console.error('Failed to fetch member list:', error);\r\n  }\r\n};                          \r\n\r\nconst options = computed(() => [...optionsPatient.value, ...optionsDoctor.value, ...optionsCS.value]);\r\n\r\nconst form = ref({});\r\n\r\nconst pushNotification = async () => {\r\n  const data = {\r\n    headings: form.value.headings,\r\n    message: form.value.message,\r\n  };\r\n  if (is_All.value) {  \r\n    try {\r\n      const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/pushNotification/all`, data);\r\n\r\n      if (response.http_status < 300) {\r\n        handleApiSuccess('Notification pushed successfully');\r\n      } else {\r\n        throw new Error(response.message);\r\n      }\r\n    } catch (error) {\r\n      handleApiError(error);\r\n    }\r\n  } else {\r\n    if (selectUser.value.length > 0) {\r\n      selectUser.value.forEach((user, index) => {\r\n        data[`external_id[${index}]`] = user.uuid;\r\n      });\r\n      console.log(selectUser.value.map(user => user.uuid));  // Logging the list of UUIDs\r\n\r\n      try {\r\n        const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/pushNotification/single`, data);\r\n\r\n        if (response.http_status < 300) {\r\n          handleApiSuccess('Notification pushed successfully');\r\n        } else {\r\n          throw new Error(response.message);\r\n        }\r\n      } catch (error) {\r\n        handleApiError(error);\r\n      }\r\n    } else {\r\n      console.error('No users selected');\r\n      handleApiError('No users selected');\r\n    }\r\n  }\r\n  \r\n};\r\n\r\n\r\n\r\n</script>\r\n<template>\r\n  <main class=\"container-fluid\">\r\n    <div class=\"py-4 container-fluid\">\r\n      <div class=\"row\">\r\n        <div class=\"col-md-12\">\r\n          <form class=\"card\" @submit.prevent=\"pushNotification\">\r\n            <div class=\"card-header pb-0\">\r\n              <div class=\"d-flex align-items-center\">\r\n                <p class=\"mb-0 text-primary font-weight-bolder\">Push Notification</p>\r\n                <argon-button color=\"success\" size=\"sm\" class=\"ms-auto\">\r\n                  Push\r\n                </argon-button>\r\n              </div>\r\n            </div>\r\n            <div class=\"card-body\">\r\n              <p class=\"text-uppercase text-sm\">Notification Information</p>\r\n              <div class=\"row\">\r\n                <div class=\"col-md-6\">\r\n                  <label for=\"example-text-input\" class=\"form-control-label\"\r\n                    >Heading</label\r\n                  >\r\n                  <argon-input type=\"text\" v-model=\"form.headings\" required/>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                  <label for=\"example-text-input\" class=\"form-control-label\"\r\n                    >Send to</label\r\n                  >\r\n                  <argon-switch id=\"sent\" name=\"Send to\" v-model:title=\"is_All\">\r\n                    <span v-if=\"is_All == true\">Everyone</span>\r\n                    <span v-else>Selected Users</span>\r\n                  </argon-switch>\r\n                </div>\r\n                <div class=\"col-md-6\">\r\n                  <argon-textarea :rows=\"8\" type=\"text\" v-model:title=\"form.message\" required>\r\n                    Message\r\n                  </argon-textarea>\r\n                </div>\r\n                <div class=\"col-md-6\" v-if=\"is_All == false\">\r\n                  <label for=\"example-text-input\" class=\"form-control-label\"\r\n                    >Receiver UUID</label\r\n                  >\r\n                  <multiselect v-model=\"selectUser\" :options=\"options\" label=\"name\" track-by=\"uuid\" placeholder=\"Select users\"\r\n                  :close-on-select=\"false\" :multiple=\"true\"></multiselect>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <error-modal :show-modal=\"showErrorModal\" :error-message=\"errorMessage\" @close=\"showErrorModal = false\" />\r\n    <success-modal :show-modal=\"showSuccessModal\" :success-message=\"successMessage\" @close=\"goListPage\" />\r\n  </main>\r\n</template>\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}