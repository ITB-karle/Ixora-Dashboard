{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, withCtx as _withCtx, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"demo-app\"\n};\nconst _hoisted_2 = {\n  class: \"demo-app-main bg-light\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"div\", _hoisted_2, [_createVNode($setup[\"FullCalendar\"], {\n    class: \"demo-app-calendar\",\n    options: $setup.calendarOptions\n  }, {\n    eventContent: _withCtx(arg => [_createElementVNode(\"b\", null, _toDisplayString(arg.timeText), 1 /* TEXT */), _createElementVNode(\"i\", null, _toDisplayString(arg.event.title), 1 /* TEXT */)]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"options\"]), _createCommentVNode(\" \\r\\n      <GlobeComponent width=\\\"800\\\" height=\\\"600\\\" /> \")])]);\n}","map":{"version":3,"names":["class","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_2","_createVNode","$setup","options","calendarOptions","eventContent","_withCtx","arg","_toDisplayString","timeText","event","title","_","_createCommentVNode"],"sources":["C:\\Users\\chink\\Documents\\GitHub\\ixora-dashboard\\src\\views\\MonthlyReminder.vue"],"sourcesContent":["<script setup>\r\nimport { ref, reactive, onMounted } from 'vue';\r\nimport FullCalendar from '@fullcalendar/vue3';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { createEventId } from '../assets/js/event-utils';\r\nimport { apiRequest } from '@/assets/js/apiRequest.js';\r\n// import GlobeComponent from '../examples/Globe.vue';\r\n\r\nconst monthMap = {\r\n  January: 1,\r\n  February: 2,\r\n  March: 3,\r\n  April: 4,\r\n  May: 5,\r\n  June: 6,\r\n  July: 7,\r\n  August: 8,\r\n  September: 9,\r\n  October: 10,\r\n  November: 11,\r\n  December: 12,\r\n};\r\n\r\nconst calendarOptions = reactive({\r\n  plugins: [\r\n    dayGridPlugin,\r\n    timeGridPlugin,\r\n    interactionPlugin,\r\n  ],\r\n  headerToolbar: {\r\n    left: 'prev,next today',\r\n    center: 'title',\r\n    right: 'dayGridMonth,timeGridWeek,timeGridDay',\r\n  },\r\n  initialView: 'dayGridMonth',\r\n  events: [],\r\n  editable: true,\r\n  selectable: true,\r\n  selectMirror: true,\r\n  dayMaxEvents: false,\r\n  weekends: true,\r\n  select: handleDateSelect,\r\n  eventClick: handleEventClick,\r\n  eventsSet: handleEvents,\r\n  datesSet: handleDatesSet,\r\n});\r\n\r\n\r\nconst patient_reminder = ref([]);\r\nconst form = ref([]);\r\nconst currentEvents = ref([]);\r\n\r\nonMounted(() => {\r\n  logCurrentMonth();  // Log the initial month and fetch data\r\n});\r\n\r\nconst getMonthlyReminder = async (year, month) => {\r\n  const data = { year, month };\r\n  try {\r\n    console.log(`Fetching reminders for Year ${year}, Month ${month}`);\r\n    const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/monthly`, data);\r\n    patient_reminder.value = response.data;\r\n    form.value = { ...response.data };\r\n    setCalendarEvents(patient_reminder.value);\r\n  } catch (error) {\r\n    console.error('Get Data Failed:', error);\r\n  }\r\n};\r\n\r\nconst setCalendarEvents = (reminders) => {\r\n  console.log(1);\r\n  const events = reminders.map(reminder => ({\r\n    id: createEventId(),\r\n    title: reminder.reminder,\r\n    start: reminder.date_from,\r\n    end: reminder.date_to,\r\n    allDay: reminder.allDay,\r\n  }));\r\n  calendarOptions.events = events;\r\n};\r\n\r\nfunction handleDateSelect(selectInfo) {\r\n  console.log(2);\r\n  let title = prompt('Please enter a new title for your event');\r\n  let calendarApi = selectInfo.view.calendar;\r\n\r\n  calendarApi.unselect();\r\n\r\n  if (title) {\r\n    calendarApi.addEvent({\r\n      id: createEventId(),\r\n      title,\r\n      start: selectInfo.startStr,\r\n      end: selectInfo.endStr,\r\n      allDay: selectInfo.allDay,\r\n    });\r\n  }\r\n}\r\n\r\nfunction handleDatesSet() {\r\n  console.log(4);\r\n  logCurrentMonth();\r\n}\r\n\r\nfunction handleEventClick(clickInfo) {\r\n  console.log(3);\r\n  if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\r\n    clickInfo.event.remove();\r\n  }\r\n}\r\n\r\nfunction handleEvents(events) {\r\n  console.log(5);\r\n  currentEvents.value = events;\r\n}\r\n\r\nfunction logCurrentMonth() {\r\n  const calendarTitle = document.querySelector('.fc-toolbar-title');\r\n  if (calendarTitle) {\r\n    const titleText = calendarTitle.textContent;\r\n    const [monthName, year] = titleText.split(' ');\r\n    const monthNumber = monthMap[monthName];\r\n    console.log(`Current view month: ${monthName} (${monthNumber})`);\r\n    getMonthlyReminder(year, monthNumber);\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class='demo-app'>\r\n    <div class='demo-app-main bg-light'>\r\n      <FullCalendar\r\n        class='demo-app-calendar'\r\n        :options='calendarOptions'\r\n      >\r\n        <template v-slot:eventContent='arg'>\r\n          <b>{{ arg.timeText }}</b>\r\n          <i>{{ arg.event.title }}</i>\r\n        </template>\r\n      </FullCalendar>\r\n<!-- \r\n      <GlobeComponent width=\"800\" height=\"600\" /> -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style lang='css'>\r\nh2 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n}\r\n\r\nul {\r\n  margin: 0;\r\n  padding: 0 0 0 1.5em;\r\n}\r\n\r\nli {\r\n  margin: 1.5em 0;\r\n  padding: 0;\r\n}\r\n\r\nb {\r\n  margin-right: 3px;\r\n}\r\n\r\n.demo-app {\r\n  display: flex;\r\n  min-height: 100%;\r\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\r\n  font-size: 14px;\r\n}\r\n\r\n.demo-app-main {\r\n  flex-grow: 1;\r\n  padding: 3em;\r\n}\r\n\r\n.fc {\r\n  max-width: 95%;\r\n  margin: 0 4rem;\r\n}\r\n</style>\r\n\r\n<!-- <script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport ArgonButton from \"@/components/ArgonButton.vue\";\r\nimport FullCalendar from '@fullcalendar/vue3'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport { apiRequest } from '@/assets/js/apiRequest.js';\r\n\r\nconst monthMap = {\r\n  January: 1,\r\n  February: 2,\r\n  March: 3,\r\n  April: 4,\r\n  May: 5,\r\n  June: 6,\r\n  July: 7,\r\n  August: 8,\r\n  September: 9,\r\n  October: 10,\r\n  November: 11,\r\n  December: 12,\r\n};\r\n\r\nvar calendarOptions = ref({\r\n  plugins: [dayGridPlugin, interactionPlugin],\r\n  initialView: 'dayGridMonth',\r\n  dateClick: handleDateClick,\r\n  datesSet: handleDatesSet,\r\n  // dayMaxEventRows: true,  // for all non-TimeGrid views\r\n  // views: {\r\n  //   timeGrid: {\r\n  //     dayMaxEventRows: 6 // adjust to 6 only for timeGridWeek/timeGridDay\r\n  //   }\r\n  // },\r\n  events: [],\r\n})\r\n\r\nfunction handleDateClick(arg) {\r\n  alert('date click! ' + arg.dateStr)\r\n}\r\n\r\n\r\nonMounted(() => {\r\n  logCurrentMonth();  // Log the initial month and fetch data\r\n});\r\n\r\nfunction logCurrentMonth() {\r\n  const calendarTitle = document.querySelector('.fc-toolbar-title');\r\n  if (calendarTitle) {\r\n    const titleText = calendarTitle.textContent;\r\n    const [monthName, year] = titleText.split(' ');\r\n    const monthNumber = monthMap[monthName];\r\n    console.log(`Current view month: ${monthName} (${monthNumber})`);\r\n    getMonthlyReminder(year, monthNumber);\r\n  }\r\n}\r\n\r\nconst patient_reminder = ref([]);\r\nconst form = ref([]);\r\n\r\nconst getMonthlyReminder = async (year, month) => {\r\n  const data = { year, month };\r\n  try {\r\n    console.log(`Fetching reminders for Year ${year}, Month ${month}`);\r\n    const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/monthly`, data);\r\n    patient_reminder.value = response.data;\r\n    form.value = { ...response.data };\r\n    setCalendarEvents(patient_reminder.value);      \r\n  } catch (error) {\r\n    console.error('Get Data Failed:', error);\r\n  }\r\n};\r\n\r\nfunction handleDatesSet() {\r\n  logCurrentMonth();\r\n  // let title = prompt(\"Please enter a new title for your event\");\r\n  //     let calendarApi = selectInfo.view.calendar;\r\n\r\n  //     calendarApi.unselect(); // clear date selection\r\n\r\n  //     if (title) {\r\n  //       calendarApi.addEvent({\r\n  //         title,\r\n  //         start: selectInfo.startStr,\r\n  //         end: selectInfo.endStr,\r\n  //         allDay: selectInfo.allDay,\r\n  //       });\r\n  //     }\r\n      // logCurrentMonth();\r\n}\r\n\r\nconst setCalendarEvents = (reminders) => {  \r\n  const events = reminders.map(reminder => ({\r\n    id: reminder.uuid,\r\n    title: reminder.reminder,\r\n    start: reminder.date_from,\r\n    end: reminder.date_to,\r\n    allDay: reminder.allDay,\r\n  }));\r\n  calendarOptions.value.events = events;\r\n};\r\n</script>\r\n<template>\r\n  <div>\r\n    <div class=\"text-end me-5 mb-3\">\r\n      <a\r\n        :href=\"`../create-notification`\"\r\n      >\r\n        <argon-button >Add</argon-button>\r\n      </a>\r\n    </div>\r\n    \r\n    <FullCalendar :options=\"calendarOptions\" class=\"calendar bg-light rounded p-4 mx-auto w-100\">\r\n      <template v-slot:eventContent='arg'>\r\n        <b>{{ arg.timeText }}</b>\r\n        <i>{{ arg.event.title }}</i>\r\n      </template>\r\n    </FullCalendar>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.calendar {\r\n  font-size: 14px;\r\n}\r\n</style> -->"],"mappings":";;EAmIOA,KAAK,EAAC;AAAU;;EACdA,KAAK,EAAC;AAAwB;;uBADrCC,mBAAA,CAcM,OAdNC,UAcM,GAbJC,mBAAA,CAYM,OAZNC,UAYM,GAXJC,YAAA,CAQeC,MAAA;IAPbN,KAAK,EAAC,mBAAmB;IACxBO,OAAO,EAAED,MAAA,CAAAE;;IAEOC,YAAY,EAAAC,QAAA,CACFC,GADO,KAChCR,mBAAA,CAAyB,WAAAS,gBAAA,CAAnBD,GAAG,CAACE,QAAQ,kBAClBV,mBAAA,CAA4B,WAAAS,gBAAA,CAAtBD,GAAG,CAACG,KAAK,CAACC,KAAK,iB;IA3I/BC,CAAA;kCA8IAC,mBAAA,+DACqD,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}