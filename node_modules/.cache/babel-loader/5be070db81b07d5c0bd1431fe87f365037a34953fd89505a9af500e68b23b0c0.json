{"ast":null,"code":"import { ref, watch, onMounted } from 'vue';\nimport { apiRequest } from '@/assets/js/apiRequest.js';\nimport { useRouter } from 'vue-router';\nimport ArgonButton from \"@/components/ArgonButton.vue\";\nimport ArgonTextarea from \"@/components/ArgonTextarea.vue\";\nimport ErrorModal from \"./components/ErrorModal.vue\";\nimport SuccessModal from \"./components/SuccessModal.vue\";\nexport default {\n  __name: 'DailyReminder',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    onMounted(() => {\n      getDailyReminder();\n    });\n    const showErrorModal = ref(false);\n    const showSuccessModal = ref(false);\n    const errorMessage = ref('');\n    const successMessage = ref('');\n    const router = useRouter();\n    const handleApiError = error => {\n      errorMessage.value = error.message || 'An unknown error occurred';\n      showErrorModal.value = true;\n    };\n    const handleApiSuccess = message => {\n      successMessage.value = message || 'Operation completed successfully';\n      showSuccessModal.value = true;\n    };\n    const goListPage = () => {\n      showSuccessModal.value = false;\n      router.go();\n    };\n    const showModal = ref(false);\n    const task = ref({\n      id: '',\n      remark: ''\n    });\n    const modalTask = uuid => {\n      showModal.value = true;\n      task.value.id = uuid;\n    };\n    const closeModal = () => {\n      showModal.value = false;\n    };\n    const currentDate = ref(new Date());\n\n    // Initialize input date with today's date\n    const formattedDateInput = ref(currentDate.value.toISOString().substr(0, 10));\n    function changeDate(days) {\n      const newDate = new Date(currentDate.value);\n      newDate.setDate(newDate.getDate() + days);\n      currentDate.value = newDate;\n      formattedDateInput.value = newDate.toISOString().substr(0, 10);\n    }\n    ;\n\n    // Watch for changes in formattedDateInput and call getDailyReminder\n    watch(formattedDateInput, (newValue, oldValue) => {\n      if (newValue !== oldValue) {\n        console.log(`Date changed from ${oldValue} to ${newValue}`);\n        getDailyReminder(newValue);\n      }\n    });\n    // Function to update currentDate when input date changes\n    function updateDate(event) {\n      currentDate.value = new Date(event.target.value);\n      formattedDateInput.value = event.target.value; // Update formattedDateInput as well\n      getDailyReminder(event.target.value); // Call getDailyReminder when date changes\n    }\n    const daily_reminder = ref([]);\n    const form = ref([]);\n    const getDailyReminder = async () => {\n      const date = formattedDateInput.value;\n      try {\n        console.log(date);\n        const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/select_daily`, {\n          date\n        });\n        daily_reminder.value = response.data;\n        form.value = {\n          ...response.data\n        };\n        // setCalendarEvents(patient_reminder.value);\n      } catch (error) {\n        console.error('Get Data Failed:', error);\n      }\n    };\n    const completeTask = async () => {\n      const data = {\n        uuid: task.value.id,\n        remark: task.value.remark\n      };\n      try {\n        const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/log/create`, data);\n        if (response.http_status < 300) {\n          closeModal();\n          handleApiSuccess('Task Completed');\n        } else {\n          throw new Error(response.message);\n        }\n      } catch (error) {\n        handleApiError(error);\n      }\n    };\n    const __returned__ = {\n      showErrorModal,\n      showSuccessModal,\n      errorMessage,\n      successMessage,\n      router,\n      handleApiError,\n      handleApiSuccess,\n      goListPage,\n      showModal,\n      task,\n      modalTask,\n      closeModal,\n      currentDate,\n      formattedDateInput,\n      changeDate,\n      updateDate,\n      daily_reminder,\n      form,\n      getDailyReminder,\n      completeTask,\n      ref,\n      watch,\n      onMounted,\n      get apiRequest() {\n        return apiRequest;\n      },\n      get useRouter() {\n        return useRouter;\n      },\n      ArgonButton,\n      ArgonTextarea,\n      ErrorModal,\n      SuccessModal\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","watch","onMounted","apiRequest","useRouter","ArgonButton","ArgonTextarea","ErrorModal","SuccessModal","getDailyReminder","showErrorModal","showSuccessModal","errorMessage","successMessage","router","handleApiError","error","value","message","handleApiSuccess","goListPage","go","showModal","task","id","remark","modalTask","uuid","closeModal","currentDate","Date","formattedDateInput","toISOString","substr","changeDate","days","newDate","setDate","getDate","newValue","oldValue","console","log","updateDate","event","target","daily_reminder","form","date","response","data","completeTask","http_status","Error"],"sources":["C:/Users/chink/Documents/GitHub/ixora-dashboard/src/views/DailyReminder.vue"],"sourcesContent":["<script setup>\r\nimport { ref, watch, onMounted } from 'vue';\r\nimport { apiRequest } from '@/assets/js/apiRequest.js';\r\nimport { useRouter } from 'vue-router';\r\nimport ArgonButton from \"@/components/ArgonButton.vue\";\r\nimport ArgonTextarea from \"@/components/ArgonTextarea.vue\";\r\n\r\nimport ErrorModal from \"./components/ErrorModal.vue\";\r\nimport SuccessModal from \"./components/SuccessModal.vue\";\r\n\r\nonMounted(() => {\r\n  getDailyReminder();\r\n\r\n});\r\n\r\nconst showErrorModal = ref(false);\r\nconst showSuccessModal = ref(false);\r\nconst errorMessage = ref('');\r\nconst successMessage = ref('');\r\n\r\nconst router = useRouter();\r\n\r\nconst handleApiError = (error) => {\r\n  errorMessage.value = error.message || 'An unknown error occurred';\r\n  showErrorModal.value = true;\r\n};\r\n\r\nconst handleApiSuccess = (message) => {\r\n  successMessage.value = message || 'Operation completed successfully';\r\n  showSuccessModal.value = true;\r\n};\r\n\r\nconst goListPage = () => {\r\n  showSuccessModal.value = false;\r\n  router.go();\r\n};\r\n\r\nconst showModal = ref(false);\r\nconst task = ref({\r\n  id: '',\r\n  remark: '',\r\n});\r\n\r\nconst modalTask = (uuid) => {\r\n  showModal.value = true;\r\n  task.value.id = uuid;\r\n};\r\n\r\nconst closeModal = () => {\r\n  showModal.value = false;\r\n};\r\n\r\nconst currentDate = ref(new Date());\r\n\r\n// Initialize input date with today's date\r\nconst formattedDateInput = ref(currentDate.value.toISOString().substr(0, 10));\r\n\r\nfunction changeDate(days) {\r\n  const newDate = new Date(currentDate.value);\r\n  newDate.setDate(newDate.getDate() + days);\r\n  currentDate.value = newDate;\r\n  formattedDateInput.value = newDate.toISOString().substr(0, 10);\r\n};\r\n\r\n// Watch for changes in formattedDateInput and call getDailyReminder\r\nwatch(formattedDateInput, (newValue, oldValue) => {\r\n  if (newValue !== oldValue) {\r\n    console.log(`Date changed from ${oldValue} to ${newValue}`);\r\n    getDailyReminder(newValue);\r\n  }\r\n});\r\n// Function to update currentDate when input date changes\r\nfunction updateDate(event) {\r\n  currentDate.value = new Date(event.target.value);\r\n  formattedDateInput.value = event.target.value; // Update formattedDateInput as well\r\n  getDailyReminder(event.target.value); // Call getDailyReminder when date changes\r\n}\r\n\r\nconst daily_reminder = ref([]);\r\nconst form = ref([]);\r\n\r\nconst getDailyReminder = async () => {\r\n  const date  = formattedDateInput.value;\r\n  try {\r\n    console.log(date);\r\n    const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/select_daily`, {date});\r\n    daily_reminder.value = response.data;\r\n    form.value = { ...response.data };\r\n    // setCalendarEvents(patient_reminder.value);\r\n  } catch (error) {\r\n    console.error('Get Data Failed:', error);\r\n  }\r\n};\r\n\r\nconst completeTask = async () => {\r\n  const data = {\r\n    uuid: task.value.id,\r\n    remark: task.value.remark,\r\n  };\r\n  try {\r\n    const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/log/create`, data);\r\n    if (response.http_status < 300) {\r\n      closeModal();\r\n      handleApiSuccess('Task Completed');\r\n    } else {\r\n      throw new Error(response.message);\r\n    }\r\n  } catch (error) {\r\n    handleApiError(error);\r\n  }\r\n};\r\n\r\n</script>\r\n\r\n<template>\r\n  <main class=\"container-fluid\">\r\n    <div class=\"card mt-5\" style=\"min-height: 500px;\">\r\n      <div class=\"text-center my-4\">\r\n        <div>\r\n          <argon-button color=\"primary\" @click=\"changeDate(-1)\">Prev</argon-button>\r\n          <input class=\"dateInput\" type=\"date\" v-model=\"formattedDateInput\" @input=\"updateDate\" />\r\n          <argon-button color=\"primary\" @click=\"changeDate(1)\">Next</argon-button>\r\n        </div>\r\n      </div>\r\n\r\n      <div v-if=\"daily_reminder.length\" class=\"py-4 container-fluid\">\r\n        <div class=\"mb-4\">\r\n          <div class=\"row\">\r\n            <div class=\"col-md-4 mb-4\" v-for=\"(reminder, index) in daily_reminder\" :key=\"index\">\r\n              <div class=\"card\">\r\n                <div class=\"card-header border-bottom border-light\">\r\n                  <div class=\"d-flex align-items-center justify-content-between\">\r\n                    <p class=\"mb-0 text-primary font-weight-bolder\">{{ reminder.patient_name }}</p>\r\n                    <p class=\"mb-0 text-dark font-weight-bolder\">Frequency Weeks:\r\n                      <span class=\"badge badge-md bg-gradient-primary\">{{ reminder.frequency_weeks }}</span>\r\n                    </p>\r\n                  </div>\r\n                </div>\r\n                <div class=\"card-body px-0 pt-0 pb-2\"  style=\"min-height: 120px;\">\r\n                  <div class=\"p-4\">{{ reminder.reminder }}</div>\r\n                </div>\r\n                <div class=\"card-footer\">\r\n                  <div class=\"d-flex justify-content-between align-items-center\">\r\n                    <div class=\"font-weight-bolder text-end\">\r\n                      <span class=\"font-weight-normal\">Created by: </span>\r\n                      {{ reminder.created_by }}\r\n                    </div>\r\n                    <div>\r\n                      <argon-button @click=\"modalTask(reminder.uuid)\">Complete</argon-button>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div v-else class=\"py-4 container-fluid\">\r\n        <div class=\"bg-white text-primary h4 text-center p-5 rounded\">\r\n          Today no reminder\r\n        </div>\r\n        \r\n      </div>\r\n      <div v-if=\"showModal\" class=\"modal fade show d-block\" tabindex=\"-1\" role=\"dialog\">\r\n        <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\r\n          <form class=\"modal-content\" @submit.prevent=\"completeTask()\">\r\n            <div class=\"modal-header\">\r\n              <h5 class=\"modal-title\">Complete Task</h5>\r\n              <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                <span aria-hidden=\"true\" @click=\"closeModal\">&times;</span>\r\n              </button>\r\n            </div>\r\n            <div class=\"modal-body\">\r\n              <p>Please make sure this task uuid\r\n                <span class=\"font-weight-bolder\">({{ task.id }})</span>\r\n                is completed\r\n              </p>\r\n              <div class=\"\">\r\n                <argon-textarea :rows=\"8\" type=\"text\" v-model:title=\"task.remark\" required>\r\n                  Remark\r\n                </argon-textarea>\r\n              </div>\r\n            </div>\r\n            <div class=\"modal-footer\">\r\n              <button type=\"submit\" class=\"btn btn-primary\">Confirm</button>\r\n              <button type=\"button\" class=\"btn btn-secondary\" @click=\"closeModal\">Cancel</button>\r\n            </div>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    </div>\r\n    <error-modal :show-modal=\"showErrorModal\" :error-message=\"errorMessage\" @close=\"showErrorModal = false\" />\r\n    <success-modal :show-modal=\"showSuccessModal\" :success-message=\"successMessage\" @close=\"goListPage\" />\r\n  </main>\r\n</template>\r\n\r\n\r\n<style>\r\n.dateInput {\r\n  border-radius: 8px;\r\n  background-color: rgba(94, 114, 228, 0.95);\r\n  border-color: rgba(94, 114, 228, 0.95);\r\n  color: white;\r\n  padding: 5px;\r\n  margin: 0px 15px;\r\n}\r\n</style>"],"mappings":"AACA,SAASA,GAAG,EAAEC,KAAK,EAAEC,SAAS,QAAQ,KAAK;AAC3C,SAASC,UAAU,QAAQ,2BAA2B;AACtD,SAASC,SAAS,QAAQ,YAAY;AACtC,OAAOC,WAAW,MAAM,8BAA8B;AACtD,OAAOC,aAAa,MAAM,gCAAgC;AAE1D,OAAOC,UAAU,MAAM,6BAA6B;AACpD,OAAOC,YAAY,MAAM,+BAA+B;;;;;;;IAExDN,SAAS,CAAC,MAAM;MACdO,gBAAgB,CAAC,CAAC;IAEpB,CAAC,CAAC;IAEF,MAAMC,cAAc,GAAGV,GAAG,CAAC,KAAK,CAAC;IACjC,MAAMW,gBAAgB,GAAGX,GAAG,CAAC,KAAK,CAAC;IACnC,MAAMY,YAAY,GAAGZ,GAAG,CAAC,EAAE,CAAC;IAC5B,MAAMa,cAAc,GAAGb,GAAG,CAAC,EAAE,CAAC;IAE9B,MAAMc,MAAM,GAAGV,SAAS,CAAC,CAAC;IAE1B,MAAMW,cAAc,GAAIC,KAAK,IAAK;MAChCJ,YAAY,CAACK,KAAK,GAAGD,KAAK,CAACE,OAAO,IAAI,2BAA2B;MACjER,cAAc,CAACO,KAAK,GAAG,IAAI;IAC7B,CAAC;IAED,MAAME,gBAAgB,GAAID,OAAO,IAAK;MACpCL,cAAc,CAACI,KAAK,GAAGC,OAAO,IAAI,kCAAkC;MACpEP,gBAAgB,CAACM,KAAK,GAAG,IAAI;IAC/B,CAAC;IAED,MAAMG,UAAU,GAAGA,CAAA,KAAM;MACvBT,gBAAgB,CAACM,KAAK,GAAG,KAAK;MAC9BH,MAAM,CAACO,EAAE,CAAC,CAAC;IACb,CAAC;IAED,MAAMC,SAAS,GAAGtB,GAAG,CAAC,KAAK,CAAC;IAC5B,MAAMuB,IAAI,GAAGvB,GAAG,CAAC;MACfwB,EAAE,EAAE,EAAE;MACNC,MAAM,EAAE;IACV,CAAC,CAAC;IAEF,MAAMC,SAAS,GAAIC,IAAI,IAAK;MAC1BL,SAAS,CAACL,KAAK,GAAG,IAAI;MACtBM,IAAI,CAACN,KAAK,CAACO,EAAE,GAAGG,IAAI;IACtB,CAAC;IAED,MAAMC,UAAU,GAAGA,CAAA,KAAM;MACvBN,SAAS,CAACL,KAAK,GAAG,KAAK;IACzB,CAAC;IAED,MAAMY,WAAW,GAAG7B,GAAG,CAAC,IAAI8B,IAAI,CAAC,CAAC,CAAC;;IAEnC;IACA,MAAMC,kBAAkB,GAAG/B,GAAG,CAAC6B,WAAW,CAACZ,KAAK,CAACe,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;IAE7E,SAASC,UAAUA,CAACC,IAAI,EAAE;MACxB,MAAMC,OAAO,GAAG,IAAIN,IAAI,CAACD,WAAW,CAACZ,KAAK,CAAC;MAC3CmB,OAAO,CAACC,OAAO,CAACD,OAAO,CAACE,OAAO,CAAC,CAAC,GAAGH,IAAI,CAAC;MACzCN,WAAW,CAACZ,KAAK,GAAGmB,OAAO;MAC3BL,kBAAkB,CAACd,KAAK,GAAGmB,OAAO,CAACJ,WAAW,CAAC,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC;IAChE;IAAC;;IAED;IACAhC,KAAK,CAAC8B,kBAAkB,EAAE,CAACQ,QAAQ,EAAEC,QAAQ,KAAK;MAChD,IAAID,QAAQ,KAAKC,QAAQ,EAAE;QACzBC,OAAO,CAACC,GAAG,CAAC,qBAAqBF,QAAQ,OAAOD,QAAQ,EAAE,CAAC;QAC3D9B,gBAAgB,CAAC8B,QAAQ,CAAC;MAC5B;IACF,CAAC,CAAC;IACF;IACA,SAASI,UAAUA,CAACC,KAAK,EAAE;MACzBf,WAAW,CAACZ,KAAK,GAAG,IAAIa,IAAI,CAACc,KAAK,CAACC,MAAM,CAAC5B,KAAK,CAAC;MAChDc,kBAAkB,CAACd,KAAK,GAAG2B,KAAK,CAACC,MAAM,CAAC5B,KAAK,CAAC,CAAC;MAC/CR,gBAAgB,CAACmC,KAAK,CAACC,MAAM,CAAC5B,KAAK,CAAC,CAAC,CAAC;IACxC;IAEA,MAAM6B,cAAc,GAAG9C,GAAG,CAAC,EAAE,CAAC;IAC9B,MAAM+C,IAAI,GAAG/C,GAAG,CAAC,EAAE,CAAC;IAEpB,MAAMS,gBAAgB,GAAG,MAAAA,CAAA,KAAY;MACnC,MAAMuC,IAAI,GAAIjB,kBAAkB,CAACd,KAAK;MACtC,IAAI;QACFwB,OAAO,CAACC,GAAG,CAACM,IAAI,CAAC;QACjB,MAAMC,QAAQ,GAAG,MAAM9C,UAAU,CAAC,gGAAgG,EAAE;UAAC6C;QAAI,CAAC,CAAC;QAC3IF,cAAc,CAAC7B,KAAK,GAAGgC,QAAQ,CAACC,IAAI;QACpCH,IAAI,CAAC9B,KAAK,GAAG;UAAE,GAAGgC,QAAQ,CAACC;QAAK,CAAC;QACjC;MACF,CAAC,CAAC,OAAOlC,KAAK,EAAE;QACdyB,OAAO,CAACzB,KAAK,CAAC,kBAAkB,EAAEA,KAAK,CAAC;MAC1C;IACF,CAAC;IAED,MAAMmC,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC/B,MAAMD,IAAI,GAAG;QACXvB,IAAI,EAAEJ,IAAI,CAACN,KAAK,CAACO,EAAE;QACnBC,MAAM,EAAEF,IAAI,CAACN,KAAK,CAACQ;MACrB,CAAC;MACD,IAAI;QACF,MAAMwB,QAAQ,GAAG,MAAM9C,UAAU,CAAC,8FAA8F,EAAE+C,IAAI,CAAC;QACvI,IAAID,QAAQ,CAACG,WAAW,GAAG,GAAG,EAAE;UAC9BxB,UAAU,CAAC,CAAC;UACZT,gBAAgB,CAAC,gBAAgB,CAAC;QACpC,CAAC,MAAM;UACL,MAAM,IAAIkC,KAAK,CAACJ,QAAQ,CAAC/B,OAAO,CAAC;QACnC;MACF,CAAC,CAAC,OAAOF,KAAK,EAAE;QACdD,cAAc,CAACC,KAAK,CAAC;MACvB;IACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}