{"ast":null,"code":"import { ref, reactive, onMounted } from 'vue';\nimport FullCalendar from '@fullcalendar/vue3';\nimport dayGridPlugin from '@fullcalendar/daygrid';\nimport timeGridPlugin from '@fullcalendar/timegrid';\nimport interactionPlugin from '@fullcalendar/interaction';\nimport { createEventId } from '../assets/js/event-utils';\nimport { apiRequest } from '@/assets/js/apiRequest.js';\n// import GlobeComponent from '../examples/Globe.vue';\n\nexport default {\n  __name: 'MonthlyReminder',\n  setup(__props, {\n    expose: __expose\n  }) {\n    __expose();\n    const monthMap = {\n      January: 1,\n      February: 2,\n      March: 3,\n      April: 4,\n      May: 5,\n      June: 6,\n      July: 7,\n      August: 8,\n      September: 9,\n      October: 10,\n      November: 11,\n      December: 12\n    };\n    const calendarOptions = reactive({\n      plugins: [dayGridPlugin, timeGridPlugin, interactionPlugin],\n      headerToolbar: {\n        left: 'prev,next today',\n        center: 'title',\n        right: 'dayGridMonth,timeGridWeek,timeGridDay'\n      },\n      initialView: 'dayGridMonth',\n      events: [],\n      editable: true,\n      selectable: true,\n      selectMirror: true,\n      dayMaxEvents: false,\n      weekends: true,\n      select: handleDateSelect,\n      eventClick: handleEventClick,\n      eventsSet: handleEvents,\n      datesSet: handleDatesSet\n    });\n    const patient_reminder = ref([]);\n    const form = ref([]);\n    const currentEvents = ref([]);\n    onMounted(() => {\n      logCurrentMonth(); // Log the initial month and fetch data\n    });\n    const getMonthlyReminder = async (year, month) => {\n      const data = {\n        year,\n        month\n      };\n      try {\n        console.log(`Fetching reminders for Year ${year}, Month ${month}`);\n        const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/monthly`, data);\n        patient_reminder.value = response.data;\n        form.value = {\n          ...response.data\n        };\n        setCalendarEvents(patient_reminder.value);\n      } catch (error) {\n        console.error('Get Data Failed:', error);\n      }\n    };\n    const setCalendarEvents = reminders => {\n      console.log(1);\n      const events = reminders.map(reminder => ({\n        id: createEventId(),\n        title: reminder.reminder,\n        start: reminder.date_from,\n        end: reminder.date_to,\n        allDay: reminder.allDay\n      }));\n      calendarOptions.events = events;\n    };\n    function handleDateSelect(selectInfo) {\n      console.log(2);\n      let title = prompt('Please enter a new title for your event');\n      let calendarApi = selectInfo.view.calendar;\n      calendarApi.unselect();\n      if (title) {\n        calendarApi.addEvent({\n          id: createEventId(),\n          title,\n          start: selectInfo.startStr,\n          end: selectInfo.endStr,\n          allDay: selectInfo.allDay\n        });\n      }\n    }\n    function handleDatesSet() {\n      console.log(4);\n      logCurrentMonth();\n    }\n    function handleEventClick(clickInfo) {\n      console.log(3);\n      if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\n        clickInfo.event.remove();\n      }\n    }\n    function handleEvents(events) {\n      console.log(5);\n      currentEvents.value = events;\n    }\n    function logCurrentMonth() {\n      const calendarTitle = document.querySelector('.fc-toolbar-title');\n      if (calendarTitle) {\n        const titleText = calendarTitle.textContent;\n        const [monthName, year] = titleText.split(' ');\n        const monthNumber = monthMap[monthName];\n        console.log(`Current view month: ${monthName} (${monthNumber})`);\n        getMonthlyReminder(year, monthNumber);\n      }\n    }\n    const __returned__ = {\n      monthMap,\n      calendarOptions,\n      patient_reminder,\n      form,\n      currentEvents,\n      getMonthlyReminder,\n      setCalendarEvents,\n      handleDateSelect,\n      handleDatesSet,\n      handleEventClick,\n      handleEvents,\n      logCurrentMonth,\n      ref,\n      reactive,\n      onMounted,\n      get FullCalendar() {\n        return FullCalendar;\n      },\n      get dayGridPlugin() {\n        return dayGridPlugin;\n      },\n      get timeGridPlugin() {\n        return timeGridPlugin;\n      },\n      get interactionPlugin() {\n        return interactionPlugin;\n      },\n      get createEventId() {\n        return createEventId;\n      },\n      get apiRequest() {\n        return apiRequest;\n      }\n    };\n    Object.defineProperty(__returned__, '__isScriptSetup', {\n      enumerable: false,\n      value: true\n    });\n    return __returned__;\n  }\n};","map":{"version":3,"names":["ref","reactive","onMounted","FullCalendar","dayGridPlugin","timeGridPlugin","interactionPlugin","createEventId","apiRequest","monthMap","January","February","March","April","May","June","July","August","September","October","November","December","calendarOptions","plugins","headerToolbar","left","center","right","initialView","events","editable","selectable","selectMirror","dayMaxEvents","weekends","select","handleDateSelect","eventClick","handleEventClick","eventsSet","handleEvents","datesSet","handleDatesSet","patient_reminder","form","currentEvents","logCurrentMonth","getMonthlyReminder","year","month","data","console","log","response","value","setCalendarEvents","error","reminders","map","reminder","id","title","start","date_from","end","date_to","allDay","selectInfo","prompt","calendarApi","view","calendar","unselect","addEvent","startStr","endStr","clickInfo","confirm","event","remove","calendarTitle","document","querySelector","titleText","textContent","monthName","split","monthNumber"],"sources":["C:/Users/chink/Documents/GitHub/ixora-dashboard/src/views/MonthlyReminder.vue"],"sourcesContent":["<script setup>\r\nimport { ref, reactive, onMounted } from 'vue';\r\nimport FullCalendar from '@fullcalendar/vue3';\r\nimport dayGridPlugin from '@fullcalendar/daygrid';\r\nimport timeGridPlugin from '@fullcalendar/timegrid';\r\nimport interactionPlugin from '@fullcalendar/interaction';\r\nimport { createEventId } from '../assets/js/event-utils';\r\nimport { apiRequest } from '@/assets/js/apiRequest.js';\r\n// import GlobeComponent from '../examples/Globe.vue';\r\n\r\nconst monthMap = {\r\n  January: 1,\r\n  February: 2,\r\n  March: 3,\r\n  April: 4,\r\n  May: 5,\r\n  June: 6,\r\n  July: 7,\r\n  August: 8,\r\n  September: 9,\r\n  October: 10,\r\n  November: 11,\r\n  December: 12,\r\n};\r\n\r\nconst calendarOptions = reactive({\r\n  plugins: [\r\n    dayGridPlugin,\r\n    timeGridPlugin,\r\n    interactionPlugin,\r\n  ],\r\n  headerToolbar: {\r\n    left: 'prev,next today',\r\n    center: 'title',\r\n    right: 'dayGridMonth,timeGridWeek,timeGridDay',\r\n  },\r\n  initialView: 'dayGridMonth',\r\n  events: [],\r\n  editable: true,\r\n  selectable: true,\r\n  selectMirror: true,\r\n  dayMaxEvents: false,\r\n  weekends: true,\r\n  select: handleDateSelect,\r\n  eventClick: handleEventClick,\r\n  eventsSet: handleEvents,\r\n  datesSet: handleDatesSet,\r\n});\r\n\r\n\r\nconst patient_reminder = ref([]);\r\nconst form = ref([]);\r\nconst currentEvents = ref([]);\r\n\r\nonMounted(() => {\r\n  logCurrentMonth();  // Log the initial month and fetch data\r\n});\r\n\r\nconst getMonthlyReminder = async (year, month) => {\r\n  const data = { year, month };\r\n  try {\r\n    console.log(`Fetching reminders for Year ${year}, Month ${month}`);\r\n    const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/monthly`, data);\r\n    patient_reminder.value = response.data;\r\n    form.value = { ...response.data };\r\n    setCalendarEvents(patient_reminder.value);\r\n  } catch (error) {\r\n    console.error('Get Data Failed:', error);\r\n  }\r\n};\r\n\r\nconst setCalendarEvents = (reminders) => {\r\n  console.log(1);\r\n  const events = reminders.map(reminder => ({\r\n    id: createEventId(),\r\n    title: reminder.reminder,\r\n    start: reminder.date_from,\r\n    end: reminder.date_to,\r\n    allDay: reminder.allDay,\r\n  }));\r\n  calendarOptions.events = events;\r\n};\r\n\r\nfunction handleDateSelect(selectInfo) {\r\n  console.log(2);\r\n  let title = prompt('Please enter a new title for your event');\r\n  let calendarApi = selectInfo.view.calendar;\r\n\r\n  calendarApi.unselect();\r\n\r\n  if (title) {\r\n    calendarApi.addEvent({\r\n      id: createEventId(),\r\n      title,\r\n      start: selectInfo.startStr,\r\n      end: selectInfo.endStr,\r\n      allDay: selectInfo.allDay,\r\n    });\r\n  }\r\n}\r\n\r\nfunction handleDatesSet() {\r\n  console.log(4);\r\n  logCurrentMonth();\r\n}\r\n\r\nfunction handleEventClick(clickInfo) {\r\n  console.log(3);\r\n  if (confirm(`Are you sure you want to delete the event '${clickInfo.event.title}'`)) {\r\n    clickInfo.event.remove();\r\n  }\r\n}\r\n\r\nfunction handleEvents(events) {\r\n  console.log(5);\r\n  currentEvents.value = events;\r\n}\r\n\r\nfunction logCurrentMonth() {\r\n  const calendarTitle = document.querySelector('.fc-toolbar-title');\r\n  if (calendarTitle) {\r\n    const titleText = calendarTitle.textContent;\r\n    const [monthName, year] = titleText.split(' ');\r\n    const monthNumber = monthMap[monthName];\r\n    console.log(`Current view month: ${monthName} (${monthNumber})`);\r\n    getMonthlyReminder(year, monthNumber);\r\n  }\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div class='demo-app'>\r\n    <div class='demo-app-main bg-light'>\r\n      <FullCalendar\r\n        class='demo-app-calendar'\r\n        :options='calendarOptions'\r\n      >\r\n        <template v-slot:eventContent='arg'>\r\n          <b>{{ arg.timeText }}</b>\r\n          <i>{{ arg.event.title }}</i>\r\n        </template>\r\n      </FullCalendar>\r\n<!-- \r\n      <GlobeComponent width=\"800\" height=\"600\" /> -->\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<style lang='css'>\r\nh2 {\r\n  margin: 0;\r\n  font-size: 16px;\r\n}\r\n\r\nul {\r\n  margin: 0;\r\n  padding: 0 0 0 1.5em;\r\n}\r\n\r\nli {\r\n  margin: 1.5em 0;\r\n  padding: 0;\r\n}\r\n\r\nb {\r\n  margin-right: 3px;\r\n}\r\n\r\n.demo-app {\r\n  display: flex;\r\n  min-height: 100%;\r\n  font-family: Arial, Helvetica Neue, Helvetica, sans-serif;\r\n  font-size: 14px;\r\n}\r\n\r\n.demo-app-main {\r\n  flex-grow: 1;\r\n  padding: 3em;\r\n}\r\n\r\n.fc {\r\n  max-width: 95%;\r\n  margin: 0 4rem;\r\n}\r\n</style>\r\n\r\n<!-- <script setup>\r\nimport { ref, onMounted } from 'vue'\r\nimport ArgonButton from \"@/components/ArgonButton.vue\";\r\nimport FullCalendar from '@fullcalendar/vue3'\r\nimport dayGridPlugin from '@fullcalendar/daygrid'\r\nimport interactionPlugin from '@fullcalendar/interaction'\r\nimport { apiRequest } from '@/assets/js/apiRequest.js';\r\n\r\nconst monthMap = {\r\n  January: 1,\r\n  February: 2,\r\n  March: 3,\r\n  April: 4,\r\n  May: 5,\r\n  June: 6,\r\n  July: 7,\r\n  August: 8,\r\n  September: 9,\r\n  October: 10,\r\n  November: 11,\r\n  December: 12,\r\n};\r\n\r\nvar calendarOptions = ref({\r\n  plugins: [dayGridPlugin, interactionPlugin],\r\n  initialView: 'dayGridMonth',\r\n  dateClick: handleDateClick,\r\n  datesSet: handleDatesSet,\r\n  // dayMaxEventRows: true,  // for all non-TimeGrid views\r\n  // views: {\r\n  //   timeGrid: {\r\n  //     dayMaxEventRows: 6 // adjust to 6 only for timeGridWeek/timeGridDay\r\n  //   }\r\n  // },\r\n  events: [],\r\n})\r\n\r\nfunction handleDateClick(arg) {\r\n  alert('date click! ' + arg.dateStr)\r\n}\r\n\r\n\r\nonMounted(() => {\r\n  logCurrentMonth();  // Log the initial month and fetch data\r\n});\r\n\r\nfunction logCurrentMonth() {\r\n  const calendarTitle = document.querySelector('.fc-toolbar-title');\r\n  if (calendarTitle) {\r\n    const titleText = calendarTitle.textContent;\r\n    const [monthName, year] = titleText.split(' ');\r\n    const monthNumber = monthMap[monthName];\r\n    console.log(`Current view month: ${monthName} (${monthNumber})`);\r\n    getMonthlyReminder(year, monthNumber);\r\n  }\r\n}\r\n\r\nconst patient_reminder = ref([]);\r\nconst form = ref([]);\r\n\r\nconst getMonthlyReminder = async (year, month) => {\r\n  const data = { year, month };\r\n  try {\r\n    console.log(`Fetching reminders for Year ${year}, Month ${month}`);\r\n    const response = await apiRequest(`https://staging.itbrightsolution.com/ixora_backend/public/api/v1/patient_reminder/monthly`, data);\r\n    patient_reminder.value = response.data;\r\n    form.value = { ...response.data };\r\n    setCalendarEvents(patient_reminder.value);      \r\n  } catch (error) {\r\n    console.error('Get Data Failed:', error);\r\n  }\r\n};\r\n\r\nfunction handleDatesSet() {\r\n  logCurrentMonth();\r\n  // let title = prompt(\"Please enter a new title for your event\");\r\n  //     let calendarApi = selectInfo.view.calendar;\r\n\r\n  //     calendarApi.unselect(); // clear date selection\r\n\r\n  //     if (title) {\r\n  //       calendarApi.addEvent({\r\n  //         title,\r\n  //         start: selectInfo.startStr,\r\n  //         end: selectInfo.endStr,\r\n  //         allDay: selectInfo.allDay,\r\n  //       });\r\n  //     }\r\n      // logCurrentMonth();\r\n}\r\n\r\nconst setCalendarEvents = (reminders) => {  \r\n  const events = reminders.map(reminder => ({\r\n    id: reminder.uuid,\r\n    title: reminder.reminder,\r\n    start: reminder.date_from,\r\n    end: reminder.date_to,\r\n    allDay: reminder.allDay,\r\n  }));\r\n  calendarOptions.value.events = events;\r\n};\r\n</script>\r\n<template>\r\n  <div>\r\n    <div class=\"text-end me-5 mb-3\">\r\n      <a\r\n        :href=\"`../create-notification`\"\r\n      >\r\n        <argon-button >Add</argon-button>\r\n      </a>\r\n    </div>\r\n    \r\n    <FullCalendar :options=\"calendarOptions\" class=\"calendar bg-light rounded p-4 mx-auto w-100\">\r\n      <template v-slot:eventContent='arg'>\r\n        <b>{{ arg.timeText }}</b>\r\n        <i>{{ arg.event.title }}</i>\r\n      </template>\r\n    </FullCalendar>\r\n  </div>\r\n</template>\r\n\r\n<style>\r\n.calendar {\r\n  font-size: 14px;\r\n}\r\n</style> -->"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}